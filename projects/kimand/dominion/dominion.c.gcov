        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:36
        -:    0:Programs:28
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
      138:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      138:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      138:  209:  if (state->deckCount[player] < 1)
      138:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      824:  346:int whoseTurn(struct gameState *state) {
      824:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    30765:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    30765:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      138:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      138:  538:    state->deckCount[player] = state->discardCount[player];
      138:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      138:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      138:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      138:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      138:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      138:  559:    if (deckCounter == 0)
      138:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    30627:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    30627:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    30627:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    30627:  576:    state->deckCount[player]--;
    30627:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    30627:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      570:  646:int adventurer_card_function(int *dt, struct gameState **s, int *cp, int *cd, int *h)
        -:  647:{
    31195:  648:	while(*dt<4){
        -:  649:		//printf("drawn treasure: %d\n",*dt);
    30055:  650:		drawCard(*cp, *s);
    30055:  651:		*cd = (*s)->hand[*cp][(*s)->handCount[*cp]-1];//top card of hand is most recently drawn card.
        -:  652:		//printf("drawn card: %d\n",*cd);
    30055:  653:		if (*cd == copper || *cd == silver || *cd == gold)
     2280:  654:			(*dt)++;
        -:  655:		else{
    27775:  656:			discardCard(((*s)->handCount[*cp]-1), *cp, *s, 0);
        -:  657:		}
        -:  658:	}
        -:  659:	//discard card
      570:  660:	discardCard(*h, *cp, *s, 0);
      570:  661:	return 0;
        -:  662:	
        -:  663:}
        -:  664:
      152:  665:int smithy_card_function(int *cp, struct gameState **s, int *h)
        -:  666:{
        -:  667:	//+4 Cards
        -:  668:	int i;
      760:  669:	for (i = 0; i < 4; i++)
        -:  670:	{
      608:  671:		drawCard(*cp, *s);
        -:  672:	}
        -:  673:
        -:  674:	//discard card
      152:  675:	discardCard(*h, *cp, *s, 0);
      152:  676:	return 0;
        -:  677:}
        -:  678:
      102:  679:int village_card_function(int *cp, struct gameState **s, int *h)
        -:  680:{
        -:  681:	//+1 Card
      102:  682:	drawCard(*cp, *s);
        -:  683:	//drawCard(*cp, *s);
        -:  684:
        -:  685:	//+2 Actions
      102:  686:	(*s)->numActions = (*s)->numActions + 2;
        -:  687:	
        -:  688:	//discard card
      102:  689:	discardCard(*h, *cp, *s, 0);
      102:  690:	return 0;
        -:  691:}
        -:  692:
    #####:  693:int great_hall_card(int *cp, struct gameState **s, int *h)
        -:  694:{
        -:  695:	//+1 Card
    #####:  696:	drawCard(*cp, *s);
        -:  697:
        -:  698:	//+1 Actions
    #####:  699:	(*s)->numActions++;
    #####:  700:	(*s)->numActions++;
        -:  701:	
        -:  702:	//discard card
    #####:  703:	discardCard(*h, *cp, *s, 0);
    #####:  704:	return 0;
        -:  705:}
        -:  706:
    #####:  707:int outpost_card(struct gameState **s, int *h, int *cp)
        -:  708:{
        -:  709:	//set outpost flag
    #####:  710:	(*s)->outpostPlayed++;
        -:  711:
        -:  712:	//discard card
    #####:  713:	discardCard(*h, *cp, *s, 0);
    #####:  714:	return 0;
        -:  715:}
        -:  716:
      824:  717:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  718:{
        -:  719:	int i;
        -:  720:	int j;
        -:  721:	int k;
        -:  722:	int x;
        -:  723:	int index;
      824:  724:	int currentPlayer = whoseTurn(state);
      824:  725:	int nextPlayer = currentPlayer + 1;
        -:  726:
      824:  727:	int tributeRevealedCards[2] = {-1, -1};
        -:  728:	int temphand[MAX_HAND];// moved above the if statement
      824:  729:	int drawntreasure=0;
        -:  730:	int cardDrawn;
      824:  731:	int z = 0;// this is the counter for the temp hand
      824:  732:	if (nextPlayer > (state->numPlayers - 1)){
      266:  733:		nextPlayer = 0;
        -:  734:	}
        -:  735:
        -:  736:	//uses switch to select card and perform actions
      824:  737:	switch( card ) 
        -:  738:	{
        -:  739:		case adventurer:
      570:  740:			adventurer_card_function(&drawntreasure, &state, &currentPlayer, &cardDrawn, &handPos);
      570:  741:			return 0;
        -:  742:		case council_room:
        -:  743:			//+4 Cards
    #####:  744:			for (i = 0; i < 4; i++)
        -:  745:			{
    #####:  746:				drawCard(currentPlayer, state);
        -:  747:			}
        -:  748:
        -:  749:			//+1 Buy
    #####:  750:			state->numBuys++;
        -:  751:
        -:  752:			//Each other player draws a card
    #####:  753:			for (i = 0; i < state->numPlayers; i++)
        -:  754:			{
    #####:  755:				if ( i != currentPlayer )
        -:  756:				{
    #####:  757:					drawCard(i, state);
        -:  758:				}
        -:  759:			}
        -:  760:
        -:  761:			//put played card in played card pile
    #####:  762:			discardCard(handPos, currentPlayer, state, 0);
        -:  763:
    #####:  764:			return 0;
        -:  765:
        -:  766:		case feast:
        -:  767:			//gain card with cost up to 5
        -:  768:			//Backup hand
    #####:  769:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  770:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  771:				state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  772:			}
        -:  773:			//Backup hand
        -:  774:
        -:  775:			//Update Coins for Buy
    #####:  776:			updateCoins(currentPlayer, state, 5);
    #####:  777:			x = 1;//Condition to loop on
    #####:  778:			while( x == 1) {//Buy one card
    #####:  779:				if (supplyCount(choice1, state) <= 0){
        -:  780:					if (DEBUG)
        -:  781:						printf("None of that card left, sorry!\n");
        -:  782:
        -:  783:					if (DEBUG){
        -:  784:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  785:					}
        -:  786:				}
    #####:  787:				else if (state->coins < getCost(choice1)){
    #####:  788:					printf("That card is too expensive!\n");
        -:  789:
        -:  790:					if (DEBUG){
        -:  791:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  792:					}
        -:  793:				}
        -:  794:				else{
        -:  795:
        -:  796:					if (DEBUG){
        -:  797:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:					}
        -:  799:
    #####:  800:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  801:					x = 0;//No more buying cards
        -:  802:
        -:  803:					if (DEBUG){
        -:  804:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:					}
        -:  806:
        -:  807:				}
        -:  808:			}     
        -:  809:
        -:  810:			//Reset Hand
    #####:  811:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  812:				state->hand[currentPlayer][i] = temphand[i];
    #####:  813:				temphand[i] = -1;
        -:  814:			}
        -:  815:			//Reset Hand
        -:  816:
    #####:  817:			return 0;
        -:  818:
        -:  819:		case gardens:
    #####:  820:			return -1;
        -:  821:
        -:  822:		case mine:
    #####:  823:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  824:
    #####:  825:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  826:			{
    #####:  827:				return -1;
        -:  828:			}
        -:  829:
    #####:  830:			if (choice2 > treasure_map || choice2 < curse)
        -:  831:			{
    #####:  832:				return -1;
        -:  833:			}
        -:  834:
    #####:  835:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  836:			{
    #####:  837:				return -1;
        -:  838:			}
        -:  839:
    #####:  840:			gainCard(choice2, state, 2, currentPlayer);
        -:  841:
        -:  842:			//discard card from hand
    #####:  843:			discardCard(handPos, currentPlayer, state, 0);
        -:  844:
        -:  845:			//discard trashed card
    #####:  846:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  847:			{
    #####:  848:				if (state->hand[currentPlayer][i] == j)
        -:  849:				{
    #####:  850:					discardCard(i, currentPlayer, state, 0);			
    #####:  851:					break;
        -:  852:				}
        -:  853:			}
        -:  854:
    #####:  855:			return 0;
        -:  856:
        -:  857:		case remodel:
    #####:  858:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  861:			{
    #####:  862:				return -1;
        -:  863:			}
        -:  864:
    #####:  865:			gainCard(choice2, state, 0, currentPlayer);
        -:  866:
        -:  867:			//discard card from hand
    #####:  868:			discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        -:  870:			//discard trashed card
    #####:  871:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  872:			{
    #####:  873:				if (state->hand[currentPlayer][i] == j)
        -:  874:				{
    #####:  875:					discardCard(i, currentPlayer, state, 0);			
    #####:  876:					break;
        -:  877:				}
        -:  878:			}
        -:  879:
        -:  880:
    #####:  881:			return 0;
        -:  882:
        -:  883:		case smithy:
      152:  884:			smithy_card_function(&currentPlayer, &state, &handPos);
      152:  885:			return 0;
        -:  886:
        -:  887:		case village:
      102:  888:			village_card_function(&currentPlayer, &state, &handPos);
      102:  889:			return 0;
        -:  890:
        -:  891:		case baron:
    #####:  892:			state->numBuys++;//Increase buys by 1!
    #####:  893:			if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  894:				int p = 0;//Iterator for hand!
    #####:  895:				int card_not_discarded = 1;//Flag for discard set!
    #####:  896:				while(card_not_discarded){
    #####:  897:					if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  898:						state->coins += 4;//Add 4 coins to the amount of coins
    #####:  899:						state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  900:						state->discardCount[currentPlayer]++;
    #####:  901:						for (;p < state->handCount[currentPlayer]; p++){
    #####:  902:							state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  903:						}
    #####:  904:						state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  905:						state->handCount[currentPlayer]--;
    #####:  906:						card_not_discarded = 0;//Exit the loop
        -:  907:					}
    #####:  908:					else if (p > state->handCount[currentPlayer]){
        -:  909:						if(DEBUG) {
        -:  910:							printf("No estate cards in your hand, invalid choice\n");
        -:  911:							printf("Must gain an estate if there are any\n");
        -:  912:						}
    #####:  913:						if (supplyCount(estate, state) > 0){
    #####:  914:							gainCard(estate, state, 0, currentPlayer);
    #####:  915:							state->supplyCount[estate]--;//Decrement estates
    #####:  916:							if (supplyCount(estate, state) == 0){
    #####:  917:								isGameOver(state);
        -:  918:							}
        -:  919:						}
    #####:  920:						card_not_discarded = 0;//Exit the loop
        -:  921:					}
        -:  922:
        -:  923:					else{
    #####:  924:						p++;//Next card
        -:  925:					}
        -:  926:				}
        -:  927:			}
        -:  928:
        -:  929:			else{
    #####:  930:				if (supplyCount(estate, state) > 0){
    #####:  931:					gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  932:					state->supplyCount[estate]--;//Decrement Estates
    #####:  933:					if (supplyCount(estate, state) == 0){
    #####:  934:						isGameOver(state);
        -:  935:					}
        -:  936:				}
        -:  937:			}
        -:  938:
        -:  939:
    #####:  940:			return 0;
        -:  941:
        -:  942:		case great_hall:
    #####:  943:			great_hall_card(&currentPlayer, &state, &handPos);
    #####:  944:			return 0;
        -:  945:
        -:  946:
        -:  947:		case minion:
        -:  948:			//+1 action
    #####:  949:			state->numActions++;
        -:  950:
        -:  951:			//discard card from hand
    #####:  952:			discardCard(handPos, currentPlayer, state, 0);
        -:  953:
    #####:  954:			if (choice1)		//+2 coins
        -:  955:			{
    #####:  956:				state->coins = state->coins + 2;
        -:  957:			}
        -:  958:
    #####:  959:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  960:			{
        -:  961:				//discard hand
    #####:  962:				while(numHandCards(state) > 0)
        -:  963:				{
    #####:  964:					discardCard(handPos, currentPlayer, state, 0);
        -:  965:				}
        -:  966:
        -:  967:				//draw 4
    #####:  968:				for (i = 0; i < 4; i++)
        -:  969:				{
    #####:  970:					drawCard(currentPlayer, state);
        -:  971:				}
        -:  972:
        -:  973:				//other players discard hand and redraw if hand size > 4
    #####:  974:				for (i = 0; i < state->numPlayers; i++)
        -:  975:				{
    #####:  976:					if (i != currentPlayer)
        -:  977:					{
    #####:  978:						if ( state->handCount[i] > 4 )
        -:  979:						{
        -:  980:							//discard hand
    #####:  981:							while( state->handCount[i] > 0 )
        -:  982:							{
    #####:  983:								discardCard(handPos, i, state, 0);
        -:  984:							}
        -:  985:
        -:  986:							//draw 4
    #####:  987:							for (j = 0; j < 4; j++)
        -:  988:							{
    #####:  989:								drawCard(i, state);
        -:  990:							}
        -:  991:						}
        -:  992:					}
        -:  993:				}
        -:  994:
        -:  995:			}
    #####:  996:			return 0;
        -:  997:
        -:  998:		case steward:
    #####:  999:			if (choice1 == 1)
        -: 1000:			{
        -: 1001:				//+2 cards
    #####: 1002:				drawCard(currentPlayer, state);
    #####: 1003:				drawCard(currentPlayer, state);
        -: 1004:			}
    #####: 1005:			else if (choice1 == 2)
        -: 1006:			{
        -: 1007:				//+2 coins
    #####: 1008:				state->coins = state->coins + 2;
        -: 1009:			}
        -: 1010:			else
        -: 1011:			{
        -: 1012:				//trash 2 cards in hand
    #####: 1013:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1014:				discardCard(choice3, currentPlayer, state, 1);
        -: 1015:			}
        -: 1016:
        -: 1017:			//discard card from hand
    #####: 1018:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1019:			return 0;
        -: 1020:
        -: 1021:		case tribute:
    #####: 1022:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1023:				if (state->deckCount[nextPlayer] > 0){
    #####: 1024:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1025:					state->deckCount[nextPlayer]--;
        -: 1026:				}
    #####: 1027:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1028:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1029:					state->discardCount[nextPlayer]--;
        -: 1030:				}
        -: 1031:				else{
        -: 1032:					//No Card to Reveal
        -: 1033:					if (DEBUG){
        -: 1034:						printf("No cards to reveal\n");
        -: 1035:					}
        -: 1036:				}
        -: 1037:			}
        -: 1038:
        -: 1039:			else{
    #####: 1040:				if (state->deckCount[nextPlayer] == 0){
    #####: 1041:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1042:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1043:						state->deckCount[nextPlayer]++;
    #####: 1044:						state->discard[nextPlayer][i] = -1;
    #####: 1045:						state->discardCount[nextPlayer]--;
        -: 1046:					}
        -: 1047:
    #####: 1048:					shuffle(nextPlayer,state);//Shuffle the deck
        -: 1049:				} 
    #####: 1050:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1051:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1052:				state->deckCount[nextPlayer]--;
    #####: 1053:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1054:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1055:				state->deckCount[nextPlayer]--;
        -: 1056:			}    
        -: 1057:
    #####: 1058:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1059:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1060:				state->playedCardCount++;
    #####: 1061:				tributeRevealedCards[1] = -1;
        -: 1062:			}
        -: 1063:
    #####: 1064:			for (i = 0; i <= 2; i ++){
    #####: 1065:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1066:					state->coins += 2;
        -: 1067:				}
        -: 1068:
    #####: 1069:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1070:					drawCard(currentPlayer, state);
    #####: 1071:					drawCard(currentPlayer, state);
        -: 1072:				}
        -: 1073:				else{//Action Card
    #####: 1074:					state->numActions = state->numActions + 2;
        -: 1075:				}
        -: 1076:			}
        -: 1077:
    #####: 1078:			return 0;
        -: 1079:
        -: 1080:		case ambassador:
    #####: 1081:			j = 0;		//used to check if player has enough cards to discard
        -: 1082:
    #####: 1083:			if (choice2 > 2 || choice2 < 0)
        -: 1084:			{
    #####: 1085:				return -1;				
        -: 1086:			}
        -: 1087:
    #####: 1088:			if (choice1 == handPos)
        -: 1089:			{
    #####: 1090:				return -1;
        -: 1091:			}
        -: 1092:
    #####: 1093:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1094:			{
    #####: 1095:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1096:				{
    #####: 1097:					j++;
        -: 1098:				}
        -: 1099:			}
    #####: 1100:			if (j < choice2)
        -: 1101:			{
    #####: 1102:				return -1;				
        -: 1103:			}
        -: 1104:
        -: 1105:			if (DEBUG) 
        -: 1106:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1107:
        -: 1108:			//increase supply count for choosen card by amount being discarded
    #####: 1109:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1110:
        -: 1111:			//each other player gains a copy of revealed card
    #####: 1112:			for (i = 0; i < state->numPlayers; i++)
        -: 1113:			{
    #####: 1114:				if (i != currentPlayer)
        -: 1115:				{
    #####: 1116:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1117:				}
        -: 1118:			}
        -: 1119:
        -: 1120:			//discard played card from hand
    #####: 1121:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1122:
        -: 1123:			//trash copies of cards returned to supply
    #####: 1124:			for (j = 0; j < choice2; j++)
        -: 1125:			{
    #####: 1126:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1127:				{
    #####: 1128:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1129:					{
    #####: 1130:						discardCard(i, currentPlayer, state, 1);
    #####: 1131:						break;
        -: 1132:					}
        -: 1133:				}
        -: 1134:			}			
        -: 1135:
    #####: 1136:			return 0;
        -: 1137:
        -: 1138:		case cutpurse:
        -: 1139:
    #####: 1140:			updateCoins(currentPlayer, state, 2);
    #####: 1141:			for (i = 0; i < state->numPlayers; i++)
        -: 1142:			{
    #####: 1143:				if (i != currentPlayer)
        -: 1144:				{
    #####: 1145:					for (j = 0; j < state->handCount[i]; j++)
        -: 1146:					{
    #####: 1147:						if (state->hand[i][j] == copper)
        -: 1148:						{
    #####: 1149:							discardCard(j, i, state, 0);
    #####: 1150:							break;
        -: 1151:						}
    #####: 1152:						if (j == state->handCount[i])
        -: 1153:						{
    #####: 1154:							for (k = 0; k < state->handCount[i]; k++)
        -: 1155:							{
        -: 1156:								if (DEBUG)
        -: 1157:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1158:							}	
    #####: 1159:							break;
        -: 1160:						}		
        -: 1161:					}
        -: 1162:
        -: 1163:				}
        -: 1164:
        -: 1165:			}				
        -: 1166:
        -: 1167:			//discard played card from hand
    #####: 1168:			discardCard(handPos, currentPlayer, state, 0);			
        -: 1169:
    #####: 1170:			return 0;
        -: 1171:
        -: 1172:
        -: 1173:		case embargo: 
        -: 1174:			//+2 Coins
    #####: 1175:			state->coins = state->coins + 2;
        -: 1176:
        -: 1177:			//see if selected pile is in play
    #####: 1178:			if ( state->supplyCount[choice1] == -1 )
        -: 1179:			{
    #####: 1180:				return -1;
        -: 1181:			}
        -: 1182:
        -: 1183:			//add embargo token to selected supply pile
    #####: 1184:			state->embargoTokens[choice1]++;
        -: 1185:
        -: 1186:			//trash card
    #####: 1187:			discardCard(handPos, currentPlayer, state, 1);		
    #####: 1188:			return 0;
        -: 1189:
        -: 1190:		case outpost:
    #####: 1191:			outpost_card(&state, &handPos, &currentPlayer);
    #####: 1192:			return 0;
        -: 1193:
        -: 1194:
        -: 1195:		case salvager:
        -: 1196:			//+1 buy
    #####: 1197:			state->numBuys++;
        -: 1198:
    #####: 1199:			if (choice1)
        -: 1200:			{
        -: 1201:				//gain coins equal to trashed card
    #####: 1202:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1203:				//trash card
    #####: 1204:				discardCard(choice1, currentPlayer, state, 1);	
        -: 1205:			}
        -: 1206:
        -: 1207:			//discard card
    #####: 1208:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1209:			return 0;
        -: 1210:
        -: 1211:		case sea_hag:
    #####: 1212:			for (i = 0; i < state->numPlayers; i++){
    #####: 1213:				if (i != currentPlayer){
    #####: 1214:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:					state->discardCount[i]++;
    #####: 1216:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:				}
        -: 1218:			}
    #####: 1219:			return 0;
        -: 1220:
        -: 1221:		case treasure_map:
        -: 1222:			//search hand for another treasure_map
    #####: 1223:			index = -1;
    #####: 1224:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1225:			{
    #####: 1226:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1227:				{
    #####: 1228:					index = i;
    #####: 1229:					break;
        -: 1230:				}
        -: 1231:			}
    #####: 1232:			if (index > -1)
        -: 1233:			{
        -: 1234:				//trash both treasure cards
    #####: 1235:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1236:				discardCard(index, currentPlayer, state, 1);
        -: 1237:
        -: 1238:				//gain 4 Gold cards
    #####: 1239:				for (i = 0; i < 4; i++)
        -: 1240:				{
    #####: 1241:					gainCard(gold, state, 1, currentPlayer);
        -: 1242:				}
        -: 1243:
        -: 1244:				//return success
    #####: 1245:				return 1;
        -: 1246:			}
        -: 1247:
        -: 1248:			//no second treasure_map found in hand
    #####: 1249:			return -1;
        -: 1250:	}
        -: 1251:
    #####: 1252:	return -1;
        -: 1253:}
        -: 1254:
    28599: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:
        -: 1258:	//if card is not trashed, added to Played pile 
    28599: 1259:	if (trashFlag < 1)
        -: 1260:	{
        -: 1261:		//add card to played pile
    28599: 1262:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    28599: 1263:		state->playedCardCount++;
        -: 1264:	}
        -: 1265:
        -: 1266:	//set played card to -1
    28599: 1267:	state->hand[currentPlayer][handPos] = -1;
        -: 1268:
        -: 1269:	//remove card from player's hand
    28599: 1270:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1271:	{
        -: 1272:		//reduce number of cards in hand
    27897: 1273:		state->handCount[currentPlayer]--;
        -: 1274:	}
      702: 1275:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1276:	{
        -: 1277:		//reduce number of cards in hand
    #####: 1278:		state->handCount[currentPlayer]--;
        -: 1279:	}
        -: 1280:	else 	
        -: 1281:	{
        -: 1282:		//replace discarded card with last card in hand
      702: 1283:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:		//set last card to -1
      702: 1285:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:		//reduce number of cards in hand
      702: 1287:		state->handCount[currentPlayer]--;
        -: 1288:	}
        -: 1289:
    28599: 1290:	return 0;
        -: 1291:}
        -: 1292:
    #####: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:	//Note: supplyPos is enum of choosen card
        -: 1296:
        -: 1297:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1298:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1299:	{
    #####: 1300:		return -1;
        -: 1301:	}
        -: 1302:
        -: 1303:	//added card for [whoseTurn] current player:
        -: 1304:	// toFlag = 0 : add to discard
        -: 1305:	// toFlag = 1 : add to deck
        -: 1306:	// toFlag = 2 : add to hand
        -: 1307:
    #####: 1308:	if (toFlag == 1)
        -: 1309:	{
    #####: 1310:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:		state->deckCount[player]++;
        -: 1312:	}
    #####: 1313:	else if (toFlag == 2)
        -: 1314:	{
    #####: 1315:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:		state->handCount[player]++;
        -: 1317:	}
        -: 1318:	else
        -: 1319:	{
    #####: 1320:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1321:		state->discardCount[player]++;
        -: 1322:	}
        -: 1323:
        -: 1324:	//decrease number in supply pile
    #####: 1325:	state->supplyCount[supplyPos]--;
        -: 1326:
    #####: 1327:	return 0;
        -: 1328:}
        -: 1329:
    #####: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:	int i;
        -: 1333:
        -: 1334:	//reset coin count
    #####: 1335:	state->coins = 0;
        -: 1336:
        -: 1337:	//add coins for each Treasure card in player's hand
    #####: 1338:	for (i = 0; i < state->handCount[player]; i++)
        -: 1339:	{
    #####: 1340:		if (state->hand[player][i] == copper)
        -: 1341:		{
    #####: 1342:			state->coins += 1;
        -: 1343:		}
    #####: 1344:		else if (state->hand[player][i] == silver)
        -: 1345:		{
    #####: 1346:			state->coins += 2;
        -: 1347:		}
    #####: 1348:		else if (state->hand[player][i] == gold)
        -: 1349:		{
    #####: 1350:			state->coins += 3;
        -: 1351:		}	
        -: 1352:	}	
        -: 1353:
        -: 1354:	//add bonus
    #####: 1355:	state->coins += bonus;
        -: 1356:
    #####: 1357:	return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
